<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.member.memberMapper">
<sql id="baseColumn">
	code, m_name, m_depart, m_job, m_age, m_phone, m_email, m_address, m_gender
</sql>

<insert id="insertMemeber" parameterType="mem">
	insert into member (<include refid="baseColumn" />)
	values(#{code}, #{m_name}, #{m_depart}, #{m_job}, #{m_age}, #{m_phone}, #{m_email}, #{m_address}, #{m_gender})
</insert>

<select id="getEmpCnt" parameterType="pmap" resultType="int">
	select count(*) from member
	where code = #{code}
</select>

<select id="getEmployeeList" parameterType="pmap" resultType="pmap">
	SELECT CODE, M_NAME, M_DEPART, D_NAME, D_TIM, M_JOB, M_AGE, M_PHONE, M_EMAIL, M_ADDRESS, M_GENDER 
	FROM MEMBER mem
	JOIN DEPARTMENT dep
	ON mem.m_depart = dep.d_id
	<where>
		<trim prefixOverrides="AND | OR">
			<if test="code != null and code != '' "> and code = #{code} </if>
			<if test="m_name != null and m_name != '' "> and m_name like '%' || #{m_name} || '%' </if>
			<if test="m_depart != null and m_depart != '' ">
				m_depart in
				<foreach collection="m_depart" item="arr" separator="," open="(" close=")">
					#{arr}
				</foreach>
			</if>
		
		</trim>
	</where>
	ORDER BY CODE
</select>

<update id="updateEmployee" parameterType="pmap">
	update member
	set
		m_name = #{m_name}
		,m_depart = #{m_depart}
		,m_job = #{m_job}
		,m_age = #{m_age}
		,m_phone = #{m_phone}
		,m_email = #{m_email}
		,m_address = #{m_address}
		,m_gender = #{m_gender}
	where code = #{code}
</update>

<delete id="delEmployee"  parameterType="pmap">
	delete from member
	where code = #{code}
</delete>

<select id="getDeptList" parameterType="pmap" resultType="pmap">
	SELECT D_ID, D_NAME, D_TIM
	FROM DEPARTMENT
</select>

<select id="getDeviceList" parameterType="pmap" resultType="pmap">
	SELECT 
		ROW_NUMBER() OVER(PARTITION BY E.GUBUN ORDER BY E.ID) AS NO, 
		O.CODE, E.ID, M_NAME, M_DEPART, M_JOB, MA.MA_CODE, MA_NAME, O.ID, GUBUN, DIVISION, NAME, AP, OS, CPU, RAM, CAPACITY, 
		BATTERY, GPU, PANNEL, HZ, RESOLUTION, SPEED, SHAPE
	FROM OWN O
	JOIN MEMBER MEM ON O.CODE = MEM.CODE
	JOIN EQUIPMENTVIEW E ON O.ID = E.ID
	JOIN MANUFACTURE MA ON E.M_CODE = MA.MA_CODE
	WHERE o.CODE = #{code}
	ORDER BY e.ID
</select>

</mapper>